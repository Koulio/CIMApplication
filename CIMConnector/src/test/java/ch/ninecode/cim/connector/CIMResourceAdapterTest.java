package ch.ninecode.cim.connector;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.exporter.ZipExporter;
import org.jboss.shrinkwrap.api.importer.ZipImporter;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.jboss.shrinkwrap.api.spec.ResourceAdapterArchive;
import org.junit.Test;
import org.junit.runner.RunWith;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.resource.cci.Connection;
import javax.resource.cci.ConnectionFactory;
import javax.resource.cci.ConnectionMetaData;
import javax.resource.cci.Interaction;
import javax.resource.spi.ResourceAdapter;
import java.io.File;
import java.util.Properties;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * CIM Resource Adapter test suite
 */
@RunWith (Arquillian.class)
public class CIMResourceAdapterTest
{
    @SuppressWarnings ("unused")
    @Deployment
    public static ResourceAdapterArchive createDeployment ()
    {
        final ResourceAdapterArchive rar;

        // Note:
        // You can either build a simplified rar, or use the maven created rar.
        // The latter depends on a successful:
        //    mvn clean install

        if (true)
        {
            // build a simplified rar
            final JavaArchive jar = ShrinkWrap.create (JavaArchive.class, "CIMConnector.jar");
            jar.addPackage (java.lang.Package.getPackage ("ch.ninecode.cim.connector"));

            rar = ShrinkWrap.create (ResourceAdapterArchive.class, "CIMConnector.rar");
            rar.addAsLibrary (jar);
            rar.addAsManifestResource (new File ("src/main/resources/META-INF/ra.xml"), "ra.xml");
            System.out.println (rar.toString (true));
            // you can examine the contents of the simplified rar using the following line
            if (false)
                rar.as (ZipExporter.class).exportTo (new File ("/home/derrick/code/CIMApplication/CIMConnector/target/CIMConnector.rar"), true);
        }
        else
            // use the rar generated by maven
            rar = ShrinkWrap
                .create (ZipImporter.class, "CIMConnector.rar")
                .importFrom (new File("./target/CIMConnector-1.0-SNAPSHOT.rar"))
                .as (ResourceAdapterArchive.class);

        return rar;
    }

    /**
     * Build a connection specification used by all the tests.
     * @return
     */
    CIMConnectionSpec remoteConfig ()
    {
        CIMConnectionSpec ret;

        ret = new CIMConnectionSpec ();
        ret.setUserName ("derrick"); // not currently used
        ret.setPassword ("secret"); // not currently used
        ret.getProperties ().put ("spark.driver.memory", "1g");
        ret.getProperties ().put ("spark.executor.memory", "4g");
        ret.getJars ().add ("/home/derrick/code/CIMScala/target/CIMScala-1.6.0-SNAPSHOT.jar");

        return (ret);
    }

    @Test
    public void testResourceAdapter () throws Exception
    {
        final Properties properties = new Properties ();
        properties.setProperty (Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");
        properties.setProperty ("openejb.deployments.classpath.include", ".*resource-injection.*");
        final InitialContext initialContext = new InitialContext (properties);
        final ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.lookup ("java:openejb/Resource/CIMConnector"); // from id of connector element in ra.xml
        assertNotNull (connectionFactory);
        final Connection connection = connectionFactory.getConnection (remoteConfig ());
        assertNotNull (connection);
        connection.close ();
        final ResourceAdapter resourceAdapter = (ResourceAdapter) initialContext.lookup ("java:openejb/Resource/CIMResourceAdapter"); // from id of resourceadapter element in ra.xml
        assertNotNull (resourceAdapter);
        assertNotNull (((CIMResourceAdapter) resourceAdapter).getYarnConfigurationPath ());
    }

    @Test
    public void testMetadata () throws Exception
    {
        final Properties properties = new Properties ();
        properties.setProperty (Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");
        properties.setProperty ("openejb.deployments.classpath.include", ".*resource-injection.*");
        final InitialContext initialContext = new InitialContext (properties);
        final ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.lookup ("java:openejb/Resource/CIMConnector");
        assertNotNull (connectionFactory);
        final Connection connection = connectionFactory.getConnection (remoteConfig ());
        assertNotNull (connection);
        ConnectionMetaData meta = connection.getMetaData ();
        assertNotNull (meta);
        assertEquals ("Spark", meta.getEISProductName ());
        assertNotNull (meta.getEISProductVersion ()); // assertEquals ("1.6.0", meta.getEISProductVersion ());
        assertNotNull (meta.getUserName ()); // assertEquals ("derrick", meta.getUserName ());
        connection.close ();
    }

    @Test
    public void testFunction () throws Exception
    {
        final Properties properties = new Properties ();
        properties.setProperty (Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");
        properties.setProperty ("openejb.deployments.classpath.include", ".*resource-injection.*");
        final InitialContext initialContext = new InitialContext (properties);
        final ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.lookup ("java:openejb/Resource/CIMConnector");
        assertNotNull (connectionFactory);
        final Connection connection = connectionFactory.getConnection (remoteConfig ());
        assertNotNull (connection);
        final CIMInteractionSpecImpl spec = new CIMInteractionSpecImpl ();
        spec.setFunctionName (CIMInteractionSpec.SAY_HELLO_FUNCTION);
        final CIMIndexedRecord input = new CIMIndexedRecord ();
        input.setRecordName (CIMIndexedRecord.INPUT);
        input.setRecordShortDescription ("the dummy input record description");
        final CIMIndexedRecord output = new CIMIndexedRecord ();
        output.setRecordName (CIMIndexedRecord.OUTPUT);
        output.setRecordShortDescription ("the dummy output record description");
        final Interaction interaction = connection.createInteraction ();
        assertTrue ("interaction returned false", interaction.execute (spec, input, output));
        assertFalse ("interaction returned empty", output.isEmpty ());
        assertEquals ("interaction returned wrong value", "Hello World!", output.get (0).toString ());
        interaction.close ();
        connection.close ();
    }

    @Test
    public void testRead () throws Exception
    {
        long ELEMENTS = new Long (351979l);
        final Properties properties = new Properties ();
        properties.setProperty (Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");
        properties.setProperty ("openejb.deployments.classpath.include", ".*resource-injection.*");
        final InitialContext initialContext = new InitialContext (properties);
        final ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.lookup ("java:openejb/Resource/CIMConnector");
        assertNotNull (connectionFactory);
        final Connection connection = connectionFactory.getConnection (remoteConfig ());
        assertNotNull (connection);
        final CIMInteractionSpecImpl spec = new CIMInteractionSpecImpl ();
        spec.setFunctionName (CIMInteractionSpec.READ_FUNCTION);
        final CIMMappedRecord input = new CIMMappedRecord ();
        input.setRecordName (CIMMappedRecord.INPUT);
        input.setRecordShortDescription ("the dummy input record description");
        input.put ("filename", "hdfs://sandbox:9000/data/NIS_CIM_Export_NS_INITIAL_FILL.rdf");
        final CIMMappedRecord output = new CIMMappedRecord ();
        output.setRecordName (CIMMappedRecord.OUTPUT);
        output.setRecordShortDescription ("the dummy output record description");
        final Interaction interaction = connection.createInteraction ();
        assertTrue ("interaction returned false", interaction.execute (spec, input, output));
        assertFalse ("interaction returned empty", output.isEmpty ());
        assertEquals ("interaction returned wrong value", ELEMENTS, output.get ("count"));
        interaction.close ();
        connection.close ();
    }
}
